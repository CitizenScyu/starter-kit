import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useState } from 'react';
import { Waypoint } from 'react-waypoint';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Footer } from '../components/footer';
import { Layout } from '../components/layout';
import { MinimalPosts } from '../components/minimal-posts';
import { PersonalHeader } from '../components/personal-theme-header';
import {
	MorePostsByPublicationDocument,
	MorePostsByPublicationQuery,
	MorePostsByPublicationQueryVariables,
	PageInfoFragment,
	PostFragment,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
	PublicationFragment,
} from '../generated/graphql';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
	publication: PublicationFragment;
	initialPosts: PostFragment[];
	initialPageInfo: PageInfoFragment;
};

export default function Index({ publication, initialPosts, initialPageInfo }: Props) {
	const [posts, setPosts] = useState<PostFragment[]>(initialPosts);
	const [pageInfo, setPageInfo] = useState<Props['initialPageInfo']>(initialPageInfo);
	const [loadedMore, setLoadedMore] = useState(false);

	const loadMore = async () => {
		const data = await request<MorePostsByPublicationQuery, MorePostsByPublicationQueryVariables>(
			GQL_ENDPOINT,
			MorePostsByPublicationDocument,
			{
				first: 20,
				host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
				after: pageInfo.endCursor,
			},
		);
		if (!data.publication) {
			return;
		}
		const newPosts = data.publication.posts.edges.map((edge) => edge.node);
		setPosts([...posts, ...newPosts]);
		setPageInfo(data.publication.posts.pageInfo);
		setLoadedMore(true);
	};
	return (
		<AppProvider publication={publication}>
			<Layout>
				<Head>
					<title>{publication.title}</title>
					<meta
						name="description"
						content={
							publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`
						}
					/>
					<meta property="twitter:card" content="summary_large_image"/>
					<meta property="twitter:title" content={publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'} />
					<meta property="twitter:description" content={publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`} />
					<meta
						property="og:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<meta
						property="twitter:image"
						content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
					/>
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addPublicationJsonLd(publication)),
						}}
					/>
				</Head>
				<Container className="mx-auto flex max-w-3xl flex-col items-stretch gap-10 px-5 py-10">
					<PersonalHeader />
					
					{/* About this publication */}
					<div className="space-y-8 rounded-lg border border-slate-200 bg-white p-6 dark:border-slate-700 dark:bg-slate-800">
						{/* Author Info */}
						{publication.author && (
							<div className="space-y-4">
								<div className="flex items-center gap-4">
									{publication.author.profilePicture && (
										<Image
											src={publication.author.profilePicture}
											alt={publication.author.name}
											className="h-16 w-16 rounded-full"
											width={64}
											height={64}
										/>
									)}
									<div>
										<p className="font-medium text-slate-900 dark:text-white">
											{publication.author.name}
										</p>
										{publication.author.tagline && (
											<p className="text-sm text-slate-500 dark:text-slate-400">
												{publication.author.tagline}
											</p>
										)}
									</div>
								</div>
								{publication.author.bio?.html && (
									<div 
										className="prose prose-sm prose-slate dark:prose-invert"
										dangerouslySetInnerHTML={{ __html: publication.author.bio.html }}
									/>
								)}
							</div>
						)}

						{/* About Publication */}
						<div className="space-y-4 border-t border-slate-200 pt-6 dark:border-slate-700">
							<h2 className="text-xl font-bold text-slate-900 dark:text-white">
								About this publication
							</h2>
							{publication.about?.html ? (
								<div 
									className="prose prose-slate dark:prose-invert max-w-none"
									dangerouslySetInnerHTML={{ __html: publication.about.html }}
								/>
							) : (
								<p className="text-slate-500 dark:text-slate-400">
									{publication.descriptionSEO || `Welcome to ${publication.title}'s blog.`}
								</p>
							)}
						</div>

						{/* Debug output */}
						<div className="hidden">
							{JSON.stringify({ publication, authorSocialLinks: publication.author?.socialMediaLinks }, null, 2)}
						</div>
						
						{/* Social Links */}
						{publication.links && (
							<div className="border-t border-slate-200 pt-6 dark:border-slate-700">
								<div className="flex flex-wrap gap-4">
									{/* RSS Link */}
									<a
										href="/rss.xml"
										target="_blank"
										rel="noopener noreferrer"
										className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400"
										title="RSS"
									>
										<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5">
											<path fillRule="evenodd" d="M3.75 4.5a.75.75 0 01.75-.75h.75c8.284 0 15 6.716 15 15v.75a.75.75 0 01-.75.75h-.75a.75.75 0 01-.75-.75v-.75C18 11.708 12.292 6 5.25 6H4.5a.75.75 0 01-.75-.75V4.5zm0 6.75a.75.75 0 01.75-.75h.75a7.5 7.5 0 017.5 7.5v.75a.75.75 0 01-.75.75h-.75a.75.75 0 01-.75-.75v-.75c0-3.176-2.574-5.75-5.75-5.75H4.5a.75.75 0 01-.75-.75v-.75zm0 7.5a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0z" clipRule="evenodd" />
										</svg>
									</a>
									{publication.links.twitter && (
										<a
											href={publication.links.twitter}
											target="_blank"
											rel="noopener noreferrer"
											className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400"
											title="Twitter"
										>
											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5">
												<path d="M11.7 12.5c0-2.3 2.9-3.5 4.7-1.9l3.7-2.1v4.2l-3.7-2.1c-1.8 1.6-4.7.4-4.7-1.9V7.5L8 9.6v4.8l3.7-2.1v.2z"/>
											</svg>
										</a>
									)}
									{publication.links.github && (
										<a
											href={publication.links.github}
											target="_blank"
											rel="noopener noreferrer"
											className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400"
											title="GitHub"
										>
											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5">
												<path fillRule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clipRule="evenodd" />
											</svg>
										</a>
									)}
									{publication.links.linkedin && (
										<a
											href={publication.links.linkedin}
											target="_blank"
											rel="noopener noreferrer"
											className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400"
											title="LinkedIn"
										>
											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5">
												<path d="M20.5 2h-17A1.5 1.5 0 002 3.5v17A1.5 1.5 0 003.5 22h17a1.5 1.5 0 001.5-1.5v-17A1.5 1.5 0 0020.5 2zM8 19H5v-9h3zM6.5 8.25A1.75 1.75 0 118.3 6.5a1.78 1.78 0 01-1.8 1.75zM19 19h-3v-4.74c0-1.42-.6-1.93-1.38-1.93A1.74 1.74 0 0013 14.19a.66.66 0 000 .14V19h-3v-9h2.9v1.3a3.11 3.11 0 012.7-1.4c1.55 0 3.36.86 3.36 3.66z"/>
											</svg>
										</a>
									)}
									{publication.links.website && (
										<a
											href={publication.links.website}
											target="_blank"
											rel="noopener noreferrer"
											className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400"
											title="Website"
										>
											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5">
												<path fillRule="evenodd" d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zM6.262 6.072a8.25 8.25 0 1010.562-.766 4.5 4.5 0 01-1.318 1.357L14.25 7.5l.165.33a.809.809 0 01-1.086 1.085l-.604-.302a1.125 1.125 0 00-1.298.21l-.132.131c-.439.44-.439 1.152 0 1.591l.296.296c.256.257.622.374.98.314l1.17-.195c.323-.054.654.036.905.245l1.33 1.108c.32.267.46.694.358 1.1a8.7 8.7 0 01-2.288 4.04l-.723.724a1.125 1.125 0 01-1.298.21l-.153-.076a1.125 1.125 0 01-.622-1.006v-1.089c0-.298-.119-.585-.33-.796l-1.347-1.347a1.125 1.125 0 01-.21-1.298L9.75 12l-1.64-1.64a6 6 0 01-1.676-3.257l-.172-1.03z" clipRule="evenodd" />
											</svg>
										</a>
									)}
									{publication.links.hashnode && (
										<a
											href={publication.links.hashnode}
											target="_blank"
											rel="noopener noreferrer"
											className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400"
											title="Hashnode"
										>
											<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-5 h-5">
												<path fillRule="evenodd" d="M12 1.5a5.25 5.25 0 00-5.25 5.25v3a3 3 0 00-3 3v6.75a3 3 0 003 3h10.5a3 3 0 003-3v-6.75a3 3 0 00-3-3v-3c0-2.9-2.35-5.25-5.25-5.25zm3.75 8.25v-3a3.75 3.75 0 10-7.5 0v3h7.5z" clipRule="evenodd" />
											</svg>
										</a>
									)}
								</div>
							</div>
						)}
					</div>

					{/* Posts list */}
					{posts.length > 0 && <MinimalPosts context="home" posts={posts} />}
					{!loadedMore && pageInfo.hasNextPage && pageInfo.endCursor && (
						<button onClick={loadMore}>
							Load more
						</button>
					)}
					{loadedMore && pageInfo.hasNextPage && pageInfo.endCursor && (
						<Waypoint onEnter={loadMore} bottomOffset={'10%'} />
					)}
					<Footer />
				</Container>
			</Layout>
		</AppProvider>
	);
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 20,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	const publication = data.publication;
	if (!publication) {
		return {
			notFound: true,
		};
	}
	const initialPosts = (publication.posts.edges ?? []).map((edge) => edge.node);

	return {
		props: {
			publication,
			initialPosts,
			initialPageInfo: publication.posts.pageInfo,
		},
		revalidate: 1,
	};
};
